!=============================================================================
! This file contains the functions in Fortran to be called in a user interpolation
! function (ie. callback) to retrieve local geometric data.
!=============================================================================

subroutine user_interp_function_fortran(c_local_code_name,        &
                                        c_cpl_id,                 &
                                        c_field_id,               &
                                        i_part,                   &
                                        c_buffer_in,              &
                                        c_buffer_out)             &
    bind(c)
    use, intrinsic :: iso_c_binding

    use cwp

    implicit none

    ! VARIABLES

    ! --> of the user interpolation function

    character(kind = c_char, len = 1) :: local_code_name, cpl_id, field_id
    integer(kind = c_int)             :: i_part
    integer(kind = c_int)             :: spatial_interp_algorithm
    integer(kind = c_int)             :: storage
    type(c_ptr), value                :: c_buffer_in
    type(c_ptr), value                :: c_buffer_out

    ! --> Fortran specific

    real(kind = c_double), pointer    :: buffer_in(:)  => null()
    real(kind = c_double), pointer    :: buffer_out(:) => null()

    ! --> for general geometric data

    integer(kind = c_int)           :: n_components
    integer(kind = c_int)           :: storage
    integer(kind = c_int)           :: dof_location

    integer(kind = c_int)           :: n_elt_src
    integer(kind = c_int), pointer  :: src_to_tgt_idx(:) => null()

    integer(kind = c_int)           :: n_elt_tgt
    integer(kind = c_int)           :: n_computed_tgt
    integer(kind = c_int), pointer  :: computed_tgt(:) => null()
    integer(kind = c_int), pointer  :: tgt_to_src_idx(:) => null()

    ! --> for location spatial interpolation algorithm

    double precision, dimension(:), pointer :: weights(:) => null()

    double precision, dimension(:), pointer :: points_coords(:)           => null()
    double precision, dimension(:), pointer :: points_uvw(:)              => null()
    double precision, dimension(:), pointer :: points_dist2(:)            => null()
    double precision, dimension(:), pointer :: points_projected_coords(:) => null()

    integer(kind = c_int),          pointer :: cell_vtx_idx(:) => null()
    integer(kind = c_int),          pointer :: cell_vtx(:)     => null()

    ! --> for intersection spatial interpolation algorithm

    double precision, dimension(:), pointer :: volumes(:)         => null()
    double precision, dimension(:), pointer :: tgt_elt_volumes(:) => null()

    ! --> for nearest neighbors spatial interpolation algorithm

    double precision, dimension(:), pointer :: distances2(:)        => null()
    double precision, dimension(:), pointer :: nearest_src_coord(:) => null()

    ! GENERAL GEOMETRIC DATA

    ! Get the number of components of the field

    n_components = CWP_Field_n_components_get(local_code_name, &
                                              cpl_id,          &
                                              field_id)

    ! Get the field data storage type

    storage = CWP_Field_storage_get(local_code_name, &
                                    cpl_id,          &
                                    field_id)

    ! Get the location of the degrees of freedom

    dof_location = CWP_Field_dof_location_get(local_code_name, &
                                              cpl_id,          &
                                              field_id)

    ! Get data from the source of the exchange

    call CWP_Field_src_data_properties_get(local_code_name, &
                                           cpl_id,          &
                                           field_id,        &
                                           i_part,          &
                                           n_elt_src,       &
                                           src_to_tgt_idx)

    ! Get data from the target of the exchange

    call CWP_Field_tgt_data_properties_get(local_code_name, &
                                           cpl_id,          &
                                           field_id,        &
                                           i_part,          &
                                           n_elt_tgt,       &
                                           n_computed_tgt,  &
                                           computed_tgt,    &
                                           tgt_to_src_idx)

    ! Transform input C pointers to Fortran pointers

    if (spatial_interp_algorithm == CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_LOCATE_ALL_TGT .or. &
        spatial_interp_algorithm == CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_OCTREE .or. &
        spatial_interp_algorithm == CWP_SPATIAL_INTERP_FROM_LOCATION_MESH_LOCATION_BOXTREE) then

      call c_f_pointer(c_buffer_in,  buffer_in,  [n_components * n_elt_src])
      call c_f_pointer(c_buffer_out, buffer_out, [n_components * src_to_tgt_idx(n_elt_src+1)])

    else if (spatial_interp_algorithm == SPATIAL_INTERP_FROM_NEAREST_SOURCES_LEAST_SQUARES .or. &
             spatial_interp_algorithm == SPATIAL_INTERP_FROM_NEAREST_TARGETS_LEAST_SQUARES .or. &
             spatial_interp_algorithm == SPATIAL_INTERP_FROM_INTERSECTION .or. &
             spatial_interp_algorithm == SPATIAL_INTERP_FROM_IDENTITY) then

      call c_f_pointer(c_buffer_in,  buffer_in,  [n_components * tgt_to_src_idx(n_computed_tgt)])
      call c_f_pointer(c_buffer_out, buffer_out, [n_components * n_elt_tgt])

    endif

    ! LOCATION SPATIAL INTERPOLATION ALGORITHM

    ! Get the weights computed by the location spatial interpolation algorithm

    call CWP_Field_location_weights_get(local_code_name, &
                                        cpl_id,           &
                                        field_id,         &
                                        i_part,           &
                                        weights)

    ! Get the point data

    call CWP_Field_location_point_data_get(local_code_name,       &
                                           cpl_id,                &
                                           field_id,              &
                                           i_part,                &
                                           points_coords,         &
                                           points_uvw,            &
                                           points_dist2,          &
                                           points_projected_coords)

    ! Get the spatial interpolation internal cell->vertex connectivity

    call CWP_Field_location_internal_cell_vtx_get(local_code_name, &
                                                 cpl_id,           &
                                                 field_id,         &
                                                 i_part,           &
                                                 cell_vtx_idx,     &
                                                 cell_vtx)

    ! INTERSECTION SPATIAL INTERPOLATION ALGORITHM

    ! Get the intersection volumes

    call CWP_Field_intersection_volumes_get(local_code_name, &
                                            cpl_id,          &
                                            field_id,        &
                                            i_part,          &
                                            volumes)

    ! Get local target elements volumes

    call CWP_Field_intersection_tgt_elt_volumes_get(local_code_name, &
                                                    cpl_id,          &
                                                    field_id,        &
                                                    i_part,          &
                                                    tgt_elt_volumes)

    ! NEAREST NEIGHBORS SPATIAL INTERPOLATION ALGORITHM

    ! Get squared distances to nearest source points

    call CWP_Field_nearest_points_distances_get(local_code_name, &
                                                cpl_id,          &
                                                field_id,        &
                                                i_part,          &
                                                distances2)

    ! Get coordinates of nearest source points

    call CWP_Field_nearest_points_coord_get(local_code_name, &
                                            cpl_id,          &
                                            field_id,        &
                                            i_part,          &
                                            nearest_src_coord)

end subroutine user_interp_function_fortran
