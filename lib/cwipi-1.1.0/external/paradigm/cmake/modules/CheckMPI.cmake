
function (compilerCParadigmID COMPILER_NAME RESULT)
  execute_process(COMMAND ${COMPILER_NAME} --version
                  OUTPUT_VARIABLE _res_compiler
                  RESULT_VARIABLE CHECK_COMPILER_RESULT)
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -V
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -qversion
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    message(FATAL_ERROR "Unable to retrive compiler version for ${COMPILER_NAME}")
  endif()
  if (_res_compiler MATCHES "^icc")
    set(${RESULT} "1" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "Intel\\(R\\) oneAPI DPC\\+\\+")
    set(${RESULT} "2" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "^g?cc \\(GCC\\)")
    set(${RESULT} "3" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "clang")
    set(${RESULT} "4" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "PathScale")
    set(${RESULT} "5" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "Cray")
    set(${RESULT} "6" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "The Portland Group")
    set(${RESULT} "7" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "XL C")
    set(${RESULT} "8" PARENT_SCOPE)
    return()
  endif()
  set(${RESULT} "9" PARENT_SCOPE)
endfunction()

function (compilerCxxParadigmID COMPILER_NAME RESULT)
  execute_process(COMMAND ${COMPILER_NAME} --version
                OUTPUT_VARIABLE _res_compiler
                RESULT_VARIABLE CHECK_COMPILER_RESULT)
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -V
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -qversion
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    message(FATAL_ERROR "Unable to retrive compiler version for ${COMPILER_NAME}")
  endif()
  if (_res_compiler MATCHES "^icpc")
    set(${RESULT} "1" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "^icpx")
    set(${RESULT} "2" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "^g\\+\\+")
    set(${RESULT} "3" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "clang")
    set(${RESULT} "4" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "PathScale")
    set(${RESULT} "5" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "Cray")
    set(${RESULT} "6" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "The Portland Group")
    set(${RESULT} "7" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "XL C")
    set(${RESULT} "8" PARENT_SCOPE)
    return()
  endif()
  set(${RESULT} "9" PARENT_SCOPE)
endfunction()

function (compilerFortParadigmID COMPILER_NAME RESULT)
  execute_process(COMMAND ${COMPILER_NAME} --version
                OUTPUT_VARIABLE _res_compiler
                RESULT_VARIABLE CHECK_COMPILER_RESULT)
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -V
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    execute_process(COMMAND ${COMPILER_NAME} -qversion
      OUTPUT_VARIABLE _res_compiler
      RESULT_VARIABLE CHECK_COMPILER_RESULT)
  endif()
  if (NOT CHECK_COMPILER_RESULT EQUAL "0")
    message(FATAL_ERROR "Unable to retrive compiler version for ${COMPILER_NAME}")
  endif()
  if (_res_compiler MATCHES "^ifort")
    set(${RESULT} "1" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "^ifx")
    set(${RESULT} "2" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "^GNU Fortran")
    set(${RESULT} "3" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "flang")
    set(${RESULT} "4" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "Cray")
    set(${RESULT} "6" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "The Portland Group")
    set(${RESULT} "7" PARENT_SCOPE)
    return()
  endif()
  if (_res_compiler MATCHES "XL Fortran")
    set(${RESULT} "8" PARENT_SCOPE)
    return()
  endif()
  set(${RESULT} "9" PARENT_SCOPE)
endfunction()

if (MPI_C_COMPILER AND CMAKE_C_COMPILER)
  message(STATUS "Checking compatibility between MPI_C_COMPILER and CMAKE_C_COMPILER")
  if (NOT (MPI_C_COMPILER STREQUAL CMAKE_C_COMPILER))
    compilerCParadigmID(${MPI_C_COMPILER} _mpi_c_compiler_id)
    compilerCParadigmID(${CMAKE_C_COMPILER} _cmake_c_compiler_id)
    if (NOT _mpi_c_compiler_id EQUAL _cmake_c_compiler_id)
      message(FATAL_ERROR "${MPI_C_COMPILER} is not compatible with ${CMAKE_C_COMPILER}")
    endif()
  endif()
  message(STATUS "Checking compatibility between MPI_C_COMPILER and CMAKE_C_COMPILER - done")
endif ()

if (MPI_CXX_COMPILER AND CMAKE_CXX_COMPILER)
  message(STATUS "Checking compatibility between MPI_CXX_COMPILER and CMAKE_CXX_COMPILER")
  if (NOT (MPI_CXX_COMPILER STREQUAL CMAKE_CXX_COMPILER))
    compilerCxxParadigmID(${MPI_CXX_COMPILER} _mpi_cxx_compiler_id)
    compilerCxxParadigmID(${CMAKE_CXX_COMPILER} _cmake_cxx_compiler_id)
    if (NOT _mpi_cxx_compiler_id EQUAL _cmake_cxx_compiler_id)
      message(FATAL_ERROR "${MPI_CXX_COMPILER} is not compatible with ${CMAKE_CXX_COMPILER}")
    endif()
  endif()
  message(STATUS "Checking compatibility between MPI_CXX_COMPILER and CMAKE_CXX_COMPILER - done")
endif ()

if (MPI_Fortran_COMPILER AND CMAKE_Fortran_COMPILER)
  message(STATUS "Checking compatibility between MPI_Fortran_COMPILER and CMAKE_Fortran_COMPILER")
  if (NOT (MPI_Fortran_COMPILER STREQUAL CMAKE_Fortran_COMPILER))
    compilerFortParadigmID(${MPI_Fortran_COMPILER} _mpi_fort_compiler_id)
    compilerFortParadigmID(${CMAKE_Fortran_COMPILER} _cmake_fort_compiler_id)
    if (NOT _mpi_fort_compiler_id EQUAL _cmake_fort_compiler_id)
      message(FATAL_ERROR "${MPI_Fortran_COMPILER} is not compatible with ${CMAKE_Fortran_COMPILER}")
    endif()
  endif()
  message(STATUS "Checking compatibility between MPI_Fortran_COMPILER and CMAKE_Fortran_COMPILER - done")
endif ()
