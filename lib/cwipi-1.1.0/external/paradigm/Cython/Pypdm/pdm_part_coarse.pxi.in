
# cdef extern from "pdm_part_priv.h":
#     ctypedef struct _part_t:
#        int           nVertex
#        int           nCell
#        int           nFace
#        int           nFacePartBound
#        int          *cellFaceIdx
#        PDM_g_num_t  *gCellFace
#        int          *cellFace
#        PDM_g_num_t  *cellLNToGN
#        int          *cellTag
#        int          *faceCell
#        int          *faceVtxIdx
#        PDM_g_num_t  *gFaceVtx
#        int          *faceVtx
#        PDM_g_num_t  *faceLNToGN
#        int          *faceTag
#        int          *facePartBoundProcIdx
#        int          *facePartBoundPartIdx
#        int          *facePartBound
#        int          *faceGroupIdx
#        int          *faceGroup
#        PDM_g_num_t  *faceGroupLNToGN
#        double       *vtx
#        PDM_g_num_t  *vtxLNToGN
#        int          *vtxTag


# cdef extern from "PDM_part_coarse_mesh_priv.h":
#     ctypedef struct _coarse_part_t:
#        _part_t    *part
#        int        *coarseCellCellIdx
#        int        *coarseCellCell
#        int        *coarseFaceGroupToFineFaceGroup
#        int        *coarseFaceToFineFace
#        int        *coarseVtxToFineVtx

#     ctypedef struct _coarse_mesh_t:
#        pass



cdef extern from "pdm_part_coarse_mesh.h":

    ctypedef struct PDM_coarse_mesh_t:
      pass

    # :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    # > Wrapping of Ppart Structure

    # :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


    # :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    # > Wrapping of function
    PDM_coarse_mesh_t * PDM_part_coarse_mesh_create(PDM_MPI_Comm  comm,
                                                    char         *method,
                                                    char         *renum_cell_method,
                                                    char         *renum_face_method,
                                                    int           n_property_cell,
                                                    int          *renum_properties_cell,
                                                    int           n_property_face,
                                                    int          *renum_properties_face,
                                                    int           n_part,
                                                    int           nTPart,
                                                    int           n_face_group,
                                                    int           have_cellTag,
                                                    int           have_faceTag,
                                                    int           have_vtxTag,
                                                    int           have_cellWeight,
                                                    int           have_faceWeight,
                                                    int           have_faceGroup)

    void PDM_part_coarse_mesh_input(PDM_coarse_mesh_t *cm,
                                    int                iPart,
                                    int                nCoarseCell,
                                    int                nCell,
                                    int                nFace,
                                    int                nVertex,
                                    int                n_face_group,
                                    int                nFacePartBound,
                                    int               *cellFaceIdx,
                                    int               *cellFace,
                                    int               *cellTag,
                                    int               *cellWeight,
                                    int               *faceWeight,
                                    PDM_g_num_t       *cellLNToGN,
                                    int               *faceCell,
                                    int               *faceVtxIdx,
                                    int               *faceVtx,
                                    int               *faceTag,
                                    PDM_g_num_t       *faceLNToGN,
                                    double            *vtxCoord,
                                    int               *vtxTag,
                                    PDM_g_num_t       *vtxLNToGN,
                                    int               *faceGroupIdx,
                                    int               *faceGroup,
                                    PDM_g_num_t       *faceGroupLNToGN,
                                    int               *facePartBoundProcIdx,
                                    int               *facePartBoundPartIdx,
                                    int               *facePartBound)

    void PDM_part_coarse_mesh_compute(PDM_coarse_mesh_t *cm)

    void PDM_part_coarse_mesh_part_dim_get(PDM_coarse_mesh_t *cm,
                                           int                iPart,
                                           int               *nCell,
                                           int               *nFace,
                                           int               *nFacePartBound,
                                           int               *nVertex,
                                           int               *nProc,
                                           int               *nTPart,
                                           int               *n_face_group,
                                           int               *sCellFace,
                                           int               *sFaceVtx,
                                           int               *sFaceGroup,
                                           int               *sCoarseCellToFineCell)

    void PDM_part_coarse_mesh_part_get(PDM_coarse_mesh_t *cm,
                                       int                iPart,
                                       int              **cellFaceIdx,
                                       int              **cellFace,
                                       int              **cellTag,
                                       PDM_g_num_t      **cellLNToGN,
                                       int              **cellInitCellIdx,
                                       int              **cellInitCell,
                                       int              **faceCell,
                                       int              **faceVtxIdx,
                                       int              **faceVtx,
                                       int              **faceTag,
                                       PDM_g_num_t      **faceLNToGN,
                                       int              **faceGroupInitFaceGroup,
                                       int              **faceInitFace,
                                       double           **vtxCoord,
                                       int              **vtxTag,
                                       PDM_g_num_t      **vtxLNToGN,
                                       int              **vtxInitVtx,
                                       int              **faceGroupIdx,
                                       int              **faceGroup,
                                       PDM_g_num_t      **faceGroupLNToGN,
                                       int              **facePartBoundProcIdx,
                                       int              **facePartBoundPartIdx,
                                       int              **facePartBound)


    void PDM_part_coarse_color_get(PDM_coarse_mesh_t *cm,
                                   int                iPart,
                                   int              **cellColor,
                                   int              **faceColor,
                                   int              **threadColor,
                                   int              **hyperPlaneColor)



    void PDM_part_coarse_mesh_free(PDM_coarse_mesh_t *cm)

    void PDM_part_coarse_mesh_time_get(PDM_coarse_mesh_t  *cm,
                                       double            **elapsed,
                                       double            **cpu,
                                       double            **cpu_user,
                                       double            **cpu_sys)

    void PDM_part_coarse_mesh_display(PDM_coarse_mesh_t *cm)

@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@cdef extern from "pdm_coarse_mesh_aniso_agglo.h":
@COMMENT_NOT_PDMA@    void PDM_part_coarse_mesh_part_set_anisotropic_info(PDM_coarse_mesh_t *cm,
@COMMENT_NOT_PDMA@                                                        int                iPart,
@COMMENT_NOT_PDMA@                                                        int               *agglomerationLines,
@COMMENT_NOT_PDMA@                                                        int               *agglomerationLinesIdx,
@COMMENT_NOT_PDMA@                                                        int                agglomerationLinesIdx_size,
@COMMENT_NOT_PDMA@                                                        int               *isOnFineBnd)
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@    void PDM_part_coarse_mesh_part_get_anisotropic_info(PDM_coarse_mesh_t *cm,
@COMMENT_NOT_PDMA@                                                        int                iPart,
@COMMENT_NOT_PDMA@                                                        int              **agglomerationLines,
@COMMENT_NOT_PDMA@                                                        int              **agglomerationLinesIdx,
@COMMENT_NOT_PDMA@                                                        int               *agglomerationLinesIdx_size,
@COMMENT_NOT_PDMA@                                                        int              **isOnFineBnd)
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@    void PDM_part_coarse_mesh_add_option_anisotropic(PDM_coarse_mesh_t *cm,
@COMMENT_NOT_PDMA@                                                     int               *anisotropicOption)
@COMMENT_NOT_PDMA@


# ------------------------------------------------------------------
cdef class CoarseMesh:
    """
    Define a coarse mesh partitioning with PDM Library
    """
    cdef PDM_coarse_mesh_t *_cm
    cdef int _n_face_group
    # ------------------------------------------------------------------
    def __cinit__(self,
                  MPI.Comm                                  comm,
                  char                                      *method,
                  char                                      *renum_cell_method,
                  char                                      *renum_face_method,
                  int                                        n_property_cell,
                  NPY.ndarray[NPY.int32_t, mode='c', ndim=1] renum_properties_cell,
                  int                                        n_property_face,
                  NPY.ndarray[NPY.int32_t, mode='c', ndim=1] renum_properties_face,
                  int                                        n_part,
                  int                                        nTPart,
                  int                                        n_face_group,
                  int                                        have_cellTag    = 0,
                  int                                        have_faceTag    = 0,
                  int                                        have_vtxTag     = 0,
                  int                                        have_cellWeight = 0,
                  int                                        have_faceWeight = 0,
                  int                                        have_faceGroup  = 0):
      """
        Create a Coarse Ppart partition from a existing Ppart partition
        with PDM Library ( Developed at ONERA by Eric Quemerais )

      """

      # ~> Communicator Mpi
      cdef MPI.MPI_Comm c_comm = comm.ob_mpi

      # ~> Set _n_face_group
      self._n_face_group =  n_face_group

      # ~> \param [in]   renum_properties_cell
      cdef int * renum_properties_cell_data
      if (renum_properties_cell is None):
          renum_properties_cell_data = NULL
      else:
          renum_properties_cell_data = <int *> renum_properties_cell.data

      # ~> \param [in] renum_properties_face
      cdef int * renum_properties_face_data
      if (renum_properties_face is None):
          renum_properties_face_data = NULL
      else:
          renum_properties_face_data = <int *> renum_properties_face.data

      # > Create
      self._cm = PDM_part_coarse_mesh_create(PDM_MPI_mpi_2_pdm_mpi_comm (<void *> &c_comm),
                                             method,
                                             renum_cell_method,
                                             renum_face_method,
                                             n_property_cell,
                                             renum_properties_cell_data,
                                             n_property_face,
                                             renum_properties_face_data,
                                             n_part,
                                             nTPart,
                                             self._n_face_group,
                                             have_cellTag,
                                             have_faceTag,
                                             have_vtxTag,
                                             have_cellWeight,
                                             have_faceWeight,
                                             have_faceGroup)

@COMMENT_NOT_PDMA@    # ------------------------------------------------------------------
@COMMENT_NOT_PDMA@    def add_option_anisotropic(self,
@COMMENT_NOT_PDMA@                               NPY.ndarray[NPY.int32_t, mode='c', ndim=1] anisotropicOption,
@COMMENT_NOT_PDMA@                               ):
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@        # > Declaration
@COMMENT_NOT_PDMA@        cdef int             *anisotropicOption_data
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # assert(anisotropicOption.shape[0] == 12)
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        anisotropicOption_data = <int *> anisotropicOption.data
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        PDM_part_coarse_mesh_add_option_anisotropic(self._cm,
@COMMENT_NOT_PDMA@                                                    anisotropicOption_data)
@COMMENT_NOT_PDMA@
    # ------------------------------------------------------------------
    def set_mesh_input(self,
                       int      iPart,
                       int      nCoarseCell,
                       int      nCell,
                       int      nFace,
                       int      nVertex,
                       int      n_face_group,
                       int      nFacePartBound,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] CellFaceIdx not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] CellFace not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] CellTag,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] CellWeight,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceWeight,
                       NPY.ndarray[npy_pdm_gnum_t , mode='c', ndim=1] CellLNToGN not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceCell not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceVtxIdx not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceVtx not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceTag ,
                       NPY.ndarray[npy_pdm_gnum_t , mode='c', ndim=1] FaceLNToGN not None,
                       NPY.ndarray[NPY.double_t   , mode='c', ndim=1] VtxCoord not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] VtxTag,
                       NPY.ndarray[npy_pdm_gnum_t , mode='c', ndim=1] VtxLNToGN not None,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceGroupIdx,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FaceGroup,
                       NPY.ndarray[npy_pdm_gnum_t , mode='c', ndim=1] FaceGroupLNToGN,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FacePartBoundProcIdx,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FacePartBoundPartIdx,
                       NPY.ndarray[NPY.int32_t    , mode='c', ndim=1] FacePartBound
                       ):
        """

        """
        # ************************************************************************
        # > Declaration
        # > Cell entity
        cdef int             *CellFaceIdx_data
        cdef int             *CellFace_data
        cdef int             *CellTag_data
        cdef int             *CellWeight_data
        cdef int             *FaceWeight_data
        cdef PDM_g_num_t     *CellLNToGN_data
        # > Face entity
        cdef int             *FaceCell_data
        cdef int             *FaceTag_data
        cdef PDM_g_num_t     *FaceLNToGN_data
        cdef int             *FaceVtxIdx_data
        cdef int             *FaceVtx_data
        # > Vertices entity
        cdef double          *VtxCoord_data
        cdef PDM_g_num_t     *VtxLNToGN_data
        cdef int             *VtxTag_data
        # > Boundary face conditions
        cdef int             *FaceGroup_data
        cdef int             *FaceGroupIdx_data
        cdef PDM_g_num_t     *FaceGroupLNToGN_data
        cdef int             *FacePartBoundProcIdx_data
        cdef int             *FacePartBoundPartIdx_data
        cdef int             *FacePartBound_data
        # ************************************************************************

        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        CellFaceIdx_data = <int *>         CellFaceIdx.data
        CellFace_data    = <int *>         CellFace.data
        CellLNToGN_data  = <PDM_g_num_t *> CellLNToGN.data

        # \param [in]   CellTag       Cell tag (size : nCell) or NULL
        if (CellTag is None):
            CellTag_data = NULL
        else:
            CellTag_data = <int *> CellTag.data

        # \param [in]   CellWeight    Cell weight (size : nCell) or NULL
        if (CellWeight is None):
            CellWeight_data = NULL
        else:
            CellWeight_data = <int *> CellWeight.data

        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        FaceCell_data   = <int *>         FaceCell.data
        FaceLNToGN_data = <PDM_g_num_t *> FaceLNToGN.data
        FaceVtx_data    = <int *>         FaceVtx.data
        FaceVtxIdx_data = <int *>         FaceVtxIdx.data

        # \param [in]   FaceTag       Distributed face tag
        if (FaceTag is None):
          FaceTag_data = NULL
        else:
          FaceTag_data = <int *> FaceTag.data

        # \param [in]   faceWeight    Face weight (size : nFace) or NULL
        if (FaceWeight is None):
            FaceWeight_data = NULL
        else:
            FaceWeight_data = <int *> FaceWeight.data

        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        VtxCoord_data  = <double *>      VtxCoord.data
        VtxLNToGN_data = <PDM_g_num_t *> VtxLNToGN.data

        if (VtxTag is None):
          VtxTag_data = NULL
        else:
          VtxTag_data = <int *> VtxTag.data

        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        if (FaceGroup is None):
          FaceGroup_data = NULL
        else:
          FaceGroup_data            = <int *>         FaceGroup.data

        if (FaceGroupIdx is None):
          FaceGroupIdx_data = NULL
        else:
          FaceGroupIdx_data            = <int *>         FaceGroupIdx.data

        if (FaceGroupLNToGN is None):
          FaceGroupLNToGN_data = NULL
        else:
          FaceGroupLNToGN_data            = <PDM_g_num_t *> FaceGroupLNToGN.data

        FacePartBoundProcIdx_data = <int *>         FacePartBoundProcIdx.data
        FacePartBoundPartIdx_data = <int *>         FacePartBoundPartIdx.data
        FacePartBound_data        = <int *>         FacePartBound.data

        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        # > Fill input mesh
        PDM_part_coarse_mesh_input(self._cm,
                                   iPart,
                                   nCoarseCell,
                                   nCell,
                                   nFace,
                                   nVertex,
                                   n_face_group,
                                   nFacePartBound,
                                   CellFaceIdx_data,
                                   CellFace_data,
                                   CellTag_data,
                                   CellWeight_data,
                                   FaceWeight_data,
                                   CellLNToGN_data,
                                   FaceCell_data,
                                   FaceVtxIdx_data,
                                   FaceVtx_data,
                                   FaceTag_data,
                                   FaceLNToGN_data,
                                   VtxCoord_data,
                                   VtxTag_data,
                                   VtxLNToGN_data,
                                   FaceGroupIdx_data,
                                   FaceGroup_data,
                                   FaceGroupLNToGN_data,
                                   FacePartBoundProcIdx_data,
                                   FacePartBoundPartIdx_data,
                                   FacePartBound_data)

@COMMENT_NOT_PDMA@    # ------------------------------------------------------------------
@COMMENT_NOT_PDMA@    def set_mesh_input_anisotropic(self,
@COMMENT_NOT_PDMA@                                   int      iPart,
@COMMENT_NOT_PDMA@                                   NPY.ndarray[NPY.int32_t, mode='c', ndim=1] agglomerationLinesInit,
@COMMENT_NOT_PDMA@                                   NPY.ndarray[NPY.int32_t, mode='c', ndim=1] agglomerationLinesInitIdx,
@COMMENT_NOT_PDMA@                                   NPY.ndarray[NPY.int32_t, mode='c', ndim=1] isOnFineBndInit
@COMMENT_NOT_PDMA@                                   ):
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@        # > Declaration
@COMMENT_NOT_PDMA@        # > Cell entity
@COMMENT_NOT_PDMA@        cdef int             *agglomerationLinesInit_data
@COMMENT_NOT_PDMA@        cdef int             *agglomerationLinesInitIdx_data
@COMMENT_NOT_PDMA@        cdef int             agglomerationLinesInitIdx_size
@COMMENT_NOT_PDMA@        cdef int             *isOnFineBndInit_data
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # \param [in]
@COMMENT_NOT_PDMA@        if (agglomerationLinesInit is None):
@COMMENT_NOT_PDMA@            agglomerationLinesInit_data = NULL
@COMMENT_NOT_PDMA@        else:
@COMMENT_NOT_PDMA@            agglomerationLinesInit_data = <int *> agglomerationLinesInit.data
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # \param [in]
@COMMENT_NOT_PDMA@        if (agglomerationLinesInitIdx is None):
@COMMENT_NOT_PDMA@            agglomerationLinesInitIdx_data  = NULL
@COMMENT_NOT_PDMA@            agglomerationLinesInitIdx_size  = 0
@COMMENT_NOT_PDMA@        else:
@COMMENT_NOT_PDMA@            agglomerationLinesInitIdx_data = <int *> agglomerationLinesInitIdx.data
@COMMENT_NOT_PDMA@            agglomerationLinesInitIdx_size  = agglomerationLinesInitIdx.shape[0]
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # \param [in]
@COMMENT_NOT_PDMA@        if (isOnFineBndInit is None):
@COMMENT_NOT_PDMA@            isOnFineBndInit_data = NULL
@COMMENT_NOT_PDMA@        else:
@COMMENT_NOT_PDMA@            isOnFineBndInit_data = <int *> isOnFineBndInit.data
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # > Verbose
@COMMENT_NOT_PDMA@        # print "isOnFineBndInit           = ", isOnFineBndInit
@COMMENT_NOT_PDMA@        # print "agglomerationLinesInit    = ", agglomerationLinesInit
@COMMENT_NOT_PDMA@        # print "agglomerationLinesInitIdx = ", agglomerationLinesInitIdx
@COMMENT_NOT_PDMA@        # print "set_mesh_input_anisotropic agglomerationLinesInitIdx_size=", agglomerationLinesInitIdx_size
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
@COMMENT_NOT_PDMA@        # > Fill input mesh for anisotropic
@COMMENT_NOT_PDMA@        PDM_part_coarse_mesh_part_set_anisotropic_info(self._cm,
@COMMENT_NOT_PDMA@                                                       iPart,
@COMMENT_NOT_PDMA@                                                       agglomerationLinesInit_data,
@COMMENT_NOT_PDMA@                                                       agglomerationLinesInitIdx_data,
@COMMENT_NOT_PDMA@                                                       agglomerationLinesInitIdx_size,
@COMMENT_NOT_PDMA@                                                       isOnFineBndInit_data)
@COMMENT_NOT_PDMA@        # :::::::::::::::::::::::::::::::::::::::::::::::::::::

    # ------------------------------------------------------------------
    def computeCoarseMesh(self):
        """
        Effective compute
        """
        PDM_part_coarse_mesh_compute(self._cm)

    # ------------------------------------------------------------------
    def __dealloc__(self):
        """
           Free memory in PTJ Lib and structure
        """
        PDM_part_coarse_mesh_free(self._cm)

    # ------------------------------------------------------------------
    def part_coarse_dim_get(self, int ipart):
        """
           Get partition dimensions
        """
        # ************************************************************************
        # > Declaration
        cdef int nCell,
        cdef int nFace,
        cdef int nFacePartBound,
        cdef int nVertex,
        cdef int nProc,
        cdef int nTPart,
        cdef int nFaceGroup,
        cdef int sCellFace,
        cdef int sFaceVtx,
        cdef int sFaceGroup,
        cdef int sCoarseCellToFineCell
        # ************************************************************************

        PDM_part_coarse_mesh_part_dim_get(self._cm,
                                          ipart,
                                          &nCell,
                                          &nFace,
                                          &nFacePartBound,
                                          &nVertex,
                                          &nProc,
                                          &nTPart,
                                          &nFaceGroup,
                                          &sCellFace,
                                          &sFaceVtx,
                                          &sFaceGroup,
                                          &sCoarseCellToFineCell)

        return {'nCell'                : nCell,
                'ipart'                : ipart,
                'nCell'                : nCell,
                'nFace'                : nFace,
                'nFacePartBound'       : nFacePartBound,
                'nVertex'              : nVertex,
                'nProc'                : nProc,
                'nTPart'               : nTPart,
                'nFaceGroup'           : nFaceGroup,
                'sCellFace'            : sCellFace,
                'sFaceVtx'             : sFaceVtx,
                'sFaceGroup'           : sFaceGroup,
                'sCoarseCellToFineCel' : sCoarseCellToFineCell
                }

    # ------------------------------------------------------------------
    def part_coarse_val_get(self, int ipart):
        """
           Get partition dimensions
        """
        # ************************************************************************
        # > Declaration
        # > Cell entity
        cdef int          *cellTag
        cdef int          *cellFaceIdx
        cdef int          *cellFace
        cdef PDM_g_num_t  *cellLNToGN
        cdef int          *cellInitCellIdx
        cdef int          *cellInitCell
        # > Face entity
        cdef int          *faceTag
        cdef int          *faceCell
        cdef int          *faceVtxIdx
        cdef int          *faceVtx
        cdef PDM_g_num_t  *faceLNToGN
        cdef int          *faceGroupInitFaceGroup
        cdef int          *faceInitFace
        cdef int          *faceGroupIdx
        cdef int          *faceGroup
        cdef PDM_g_num_t  *faceGroupLNToGN
        cdef int          *facePartBound
        cdef int          *facePartBoundProcIdx
        cdef int          *facePartBoundPartIdx
        # > Vertices entity
        cdef double       *vtxCoord
        cdef int          *vtxTag
        cdef PDM_g_num_t  *vtxLNToGN
        cdef int          *vtxInitVtx
        # > For numpy capsule
        cdef NPY.npy_intp dim
        # ************************************************************************
        # > Get dim
        dims = self.part_coarse_dim_get(ipart)

        # > Get array
        PDM_part_coarse_mesh_part_get(self._cm,
                                      ipart,
                                      &cellFaceIdx,
                                      &cellFace,
                                      &cellTag,
                                      &cellLNToGN,
                                      &cellInitCellIdx,
                                      &cellInitCell,
                                      &faceCell,
                                      &faceVtxIdx,
                                      &faceVtx,
                                      &faceTag,
                                      &faceLNToGN,
                                      &faceGroupInitFaceGroup,
                                      &faceInitFace,
                                      &vtxCoord,
                                      &vtxTag,
                                      &vtxLNToGN,
                                      &vtxInitVtx,
                                      &faceGroupIdx,
                                      &faceGroup,
                                      &faceGroupLNToGN,
                                      &facePartBoundProcIdx,
                                      &facePartBoundPartIdx,
                                      &facePartBound)


        # > Translate to numpy capsule (Tout est pas fait encore )
        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
        return {
            'npCellTag'                : create_numpy_or_none_i(cellTag,                dims['nCell'],                flag_owndata=False),
            'npCellFaceIdx'            : create_numpy_or_none_i(cellFaceIdx,            dims['nCell']+1,              flag_owndata=False),
            'npCellFace'               : create_numpy_or_none_i(cellFace,               dims['sCellFace'],            flag_owndata=False),
            'npCellLNToGN'             : create_numpy_or_none_g(cellLNToGN,             dims['nCell'],                flag_owndata=False),
            'npCellInitCellIdx'        : create_numpy_or_none_i(cellInitCellIdx,        dims['nCell']+1,              flag_owndata=False),
            'npCellInitCell'           : create_numpy_or_none_i(cellInitCell,           dims['sCoarseCellToFineCel'], flag_owndata=False),
            'npFaceTag'                : create_numpy_or_none_i(faceTag,                dims['nFace'],                flag_owndata=False),
            'npFaceCell'               : create_numpy_or_none_i(faceCell,               2*dims['nFace'],              flag_owndata=False),
            'npFaceVertexIdx'          : create_numpy_or_none_i(faceVtxIdx,             dims['nFace']+1,              flag_owndata=False),
            'npFaceVertex'             : create_numpy_or_none_i(faceVtx,                dims['sFaceVtx'],             flag_owndata=False),
            'npFaceLNToGN'             : create_numpy_or_none_g(faceLNToGN,             dims['nFace'],                flag_owndata=False),
            'npfacePartBoundProcIdx'   : create_numpy_or_none_i(facePartBoundProcIdx,   dims['nProc']+1,              flag_owndata=False),
            'npfacePartBoundPartIdx'   : create_numpy_or_none_i(facePartBoundPartIdx,   dims['nTPart']+1,             flag_owndata=False),
            'npFacePartBound'          : create_numpy_or_none_i(facePartBound,          4*dims['nFacePartBound'],     flag_owndata=False),
            'npVertexTag'              : create_numpy_or_none_i(vtxTag,                 dims['nVertex'],              flag_owndata=False),
            'npVertex'                 : create_numpy_or_none_d(vtxCoord,               3*dims['nVertex'],            flag_owndata=False),
            'npVertexLNToGN'           : create_numpy_or_none_g(vtxLNToGN,              dims['nVertex'],              flag_owndata=False),
            'npVtxInitVtx'             : create_numpy_or_none_i(vtxInitVtx,             dims['nVertex'],              flag_owndata=False),
            'npFaceGroupIdx'           : create_numpy_or_none_i(faceGroupIdx,           self._n_face_group+1,         flag_owndata=False),
            'npFaceGroup'              : create_numpy_or_none_i(faceGroup,              dims['sFaceGroup'],           flag_owndata=False),
            'npfaceGroupInitFaceGroup' : create_numpy_or_none_i(faceGroupInitFaceGroup, dims['sFaceGroup'],           flag_owndata=False),
            'npFaceGroupLNToGN'        : create_numpy_or_none_g(faceGroupLNToGN,        dims['sFaceGroup'],           flag_owndata=False),
            'npFaceInitFace'           : create_numpy_or_none_i(faceInitFace,           dims['nFace'],                flag_owndata=False),
        }
        # :::::::::::::::::::::::::::::::::::::::::::::::::::::

@COMMENT_NOT_PDMA@    # ------------------------------------------------------------------
@COMMENT_NOT_PDMA@    def part_coarse_val_get_anisotropic(self, int ipart):
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@           Get partition dimensions
@COMMENT_NOT_PDMA@        """
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@        # > Declaration
@COMMENT_NOT_PDMA@        cdef int          *agglomerationLines
@COMMENT_NOT_PDMA@        cdef int          *agglomerationLinesIdx
@COMMENT_NOT_PDMA@        cdef int           agglomerationLinesIdx_size
@COMMENT_NOT_PDMA@        cdef int          *isOnFineBnd
@COMMENT_NOT_PDMA@        # ************************************************************************
@COMMENT_NOT_PDMA@        # > Get dim
@COMMENT_NOT_PDMA@        dims = self.part_coarse_dim_get(ipart)
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # > Get array
@COMMENT_NOT_PDMA@        PDM_part_coarse_mesh_part_get_anisotropic_info(self._cm,
@COMMENT_NOT_PDMA@                                                       ipart,
@COMMENT_NOT_PDMA@                                                       &agglomerationLines,
@COMMENT_NOT_PDMA@                                                       &agglomerationLinesIdx,
@COMMENT_NOT_PDMA@                                                       &agglomerationLinesIdx_size,
@COMMENT_NOT_PDMA@                                                       &isOnFineBnd)
@COMMENT_NOT_PDMA@        # Verbose
@COMMENT_NOT_PDMA@        # print "PDM_part_coarse_mesh_part_get_anisotropic_info : agglomerationLinesIdx_size : ", agglomerationLinesIdx_size
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
@COMMENT_NOT_PDMA@        # > Translate to numpy capsule (Tout est pas fait encore )
@COMMENT_NOT_PDMA@        dim = agglomerationLinesIdx[agglomerationLinesIdx_size-1]
@COMMENT_NOT_PDMA@        npAggloLines    = create_numpy_or_none_i(agglomerationLines, dim, flag_owndata=False)
@COMMENT_NOT_PDMA@        npAggloLinesIdx = create_numpy_or_none_i(agglomerationLinesIdx, agglomerationLinesIdx_size, flag_owndata=False)
@COMMENT_NOT_PDMA@        npIsOnFineBnd   = create_numpy_or_none_i(isOnFineBnd, dims['nCell'], flag_owndata=False)
@COMMENT_NOT_PDMA@
@COMMENT_NOT_PDMA@        # :::::::::::::::::::::::::::::::::::::::::::::::::::::
@COMMENT_NOT_PDMA@        return {'npAggloLines'    : npAggloLines,
@COMMENT_NOT_PDMA@                'npAggloLinesIdx' : npAggloLinesIdx,
@COMMENT_NOT_PDMA@                'npIsOnFineBnd'   : npIsOnFineBnd,
@COMMENT_NOT_PDMA@                }

    # ------------------------------------------------------------------
    def part_color_get(self, int ipart):
        """
           Get partition dimensions
        """
        # ************************************************************************
        # > Declaration
        cdef int          *cellColor
        cdef int          *faceColor
        cdef int          *threadColor
        cdef int          *hyperPlaneColor
        # ************************************************************************

        # dims = self.part_dim_get(self.id, ipart)
        dims = self.part_coarse_dim_get(ipart)

        # -> Call PPART to get info
        PDM_part_coarse_color_get(self._cm,
                                  ipart,
                                  &cellColor,
                                  &faceColor,
                                  &threadColor,
                                  &hyperPlaneColor)
        return {
            'npCellColor'       : create_numpy_or_none_i(cellColor,       dims['nCell'], flag_owndata=False),
            'npFaceColor'       : create_numpy_or_none_i(faceColor,       dims['nFace'], flag_owndata=False),
            'npThreadColor'     : create_numpy_or_none_i(threadColor,     dims['nCell'], flag_owndata=False),
            'npHyperPlaneColor' : create_numpy_or_none_i(hyperPlaneColor, dims['nCell'], flag_owndata=False),
        }
