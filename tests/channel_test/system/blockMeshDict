/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

//xDist #calc "3*Foam::constant::mathematical::pi";
//yDist 2;
//ymDist 1;
//zDist #calc "Foam::constant::mathematical::pi"; 

vertices
(
//    (0 0 0)
//    ($xDist 0 0)
//    (0 $ymDist 0)
//    ($xDist $ymDist 0)
//    (0 $yDist 0)
//    ($xDist $yDist 0)
//    (0 0 $zDist)
//    ($xDist 0 $zDist)
//    (0 $ymDist $zDist)
//    ($xDist $ymDist $zDist)
//    (0 $yDist $zDist)
//    ($xDist $yDist $zDist)
    
    (0 0 0)
    (9.42 0 0)
    (0 1 0)
    (9.42 1 0)
    (0 2 0)
    (9.42 2 0)
    (0 0 3.14)
    (9.42 0 3.14)
    (0 1 3.14)
    (9.42 1 3.14)
    (0 2 3.14)
    (9.42 2 3.14)
);

blocks
(
    hex (0 1 3 2 6 7 9 8) (70 50 50) simpleGrading (1 10.7028 1)
    hex (2 3 5 4 8 9 11 10) (70 50 50) simpleGrading (1 0.0934 1)
);

edges
(
);

boundary
(
    bottomWall
    {
        type            wall;
        faces           ((0 1 7 6));
    }
    topWall
    {
        type            wall;
        faces           ((4 10 11 5));
    }

    sides1_half0
    {
        type            cyclic;
        neighbourPatch  sides1_half1;
        faces           ((0 2 3 1));
    }
    sides1_half1
    {
        type            cyclic;
        neighbourPatch  sides1_half0;
        faces           ((6 7 9 8));
    }

    sides2_half0
    {
        type            cyclic;
        neighbourPatch  sides2_half1;
        faces           ((2 4 5 3));
    }
    sides2_half1
    {
        type            cyclic;
        neighbourPatch  sides2_half0;
        faces           ((8 9 11 10));
    }

    inout1_half0
    {
        type            cyclic;
        neighbourPatch  inout1_half1;
        faces           ((1 3 9 7));
    }
    inout1_half1
    {
        type            cyclic;
        neighbourPatch  inout1_half0;
        faces           ((0 6 8 2));
    }

    inout2_half0
    {
        type            cyclic;
        neighbourPatch  inout2_half1;
        faces           ((3 5 11 9));
    }
    inout2_half1
    {
        type            cyclic;
        neighbourPatch  inout2_half0;
        faces           ((2 8 10 4));
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
